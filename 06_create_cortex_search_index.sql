-- =============================================================================
-- CORTEX SEARCH ENTITLEMENTS DEMO - Cortex Search Index Creation
-- =============================================================================
-- This script creates Cortex Search indexes for the transaction data with entitlements
-- Run this script after completing all previous setup scripts

-- Set context
USE ROLE ACCOUNTADMIN;
USE DATABASE CORTEX_SEARCH_ENTITLEMENTS_DB;
USE SCHEMA ENTITLEMENTS;
USE WAREHOUSE ENTITLEMENTS_WH;

-- =============================================================================
-- STEP 1: ENABLE CORTEX SEARCH (if not already enabled)
-- =============================================================================
-- Note: Cortex Search may require specific account configuration
-- Check with your Snowflake administrator if this fails

-- Verify Cortex Search is available
-- SHOW FUNCTIONS LIKE 'SNOWFLAKE.CORTEX%';

-- =============================================================================
-- STEP 2: CREATE CORTEX SEARCH SERVICE
-- =============================================================================

-- Create the Cortex Search service for transaction search
CREATE OR REPLACE CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE
ON SEARCH_CONTENT -- The searchable text field
WAREHOUSE = ENTITLEMENTS_WH
TARGET_LAG = '1 minute'
AS (
    SELECT 
        TRANSACTION_ID,
        SEARCH_CONTENT,
        
        -- Entitlement attributes for filtering
        AUTHORIZED_USERS,
        AUTHORIZED_USER_COUNT,
        EXECUTIVE_USERS,
        MANAGER_USERS,
        DEPARTMENT_USERS,
        SPECIALIST_USERS,  
        EXTERNAL_USERS,
        
        -- Transaction attributes for filtering and display
        CUSTOMER_ID,
        MERCHANT_ID,
        TRANSACTION_DATE,
        AMOUNT,
        CURRENCY,
        CARD_BRAND,
        CARD_TYPE,
        MERCHANT_NAME,
        MERCHANT_CATEGORY,
        MERCHANT_DESCRIPTION,
        TRANSACTION_STATUS,
        REGION_CODE,
        REGION_NAME,
        COUNTRY_CODE,
        IS_INTERNATIONAL,
        CUSTOMER_TIER,
        RISK_LEVEL,
        RISK_SCORE,
        SENSITIVITY_LEVEL,
        PRIMARY_DEPARTMENT,
        IS_ONLINE,
        CREATED_TIMESTAMP,
        UPDATED_TIMESTAMP
        
    FROM CORTEX_SEARCH_TRANSACTIONS
);

-- =============================================================================
-- STEP 3: CREATE SPECIALIZED SEARCH SERVICES (Optional)
-- =============================================================================

-- Create a search service specifically for high-value transactions
CREATE OR REPLACE CORTEX SEARCH SERVICE HIGH_VALUE_TRANSACTION_SEARCH
ON SEARCH_CONTENT
WAREHOUSE = ENTITLEMENTS_WH  
TARGET_LAG = '1 minute'
AS (
    SELECT 
        TRANSACTION_ID,
        SEARCH_CONTENT,
        AUTHORIZED_USERS,
        AUTHORIZED_USER_COUNT,
        EXECUTIVE_USERS,
        MANAGER_USERS,
        AMOUNT,
        CUSTOMER_TIER,
        RISK_LEVEL,
        SENSITIVITY_LEVEL,
        REGION_CODE,
        MERCHANT_NAME,
        MERCHANT_CATEGORY,
        TRANSACTION_DATE,
        CARD_BRAND
    FROM CORTEX_SEARCH_TRANSACTIONS
    WHERE AMOUNT >= 1000  -- Focus on high-value transactions
);

-- Create a search service for fraud and risk analysis
CREATE OR REPLACE CORTEX SEARCH SERVICE FRAUD_RISK_TRANSACTION_SEARCH  
ON SEARCH_CONTENT
WAREHOUSE = ENTITLEMENTS_WH
TARGET_LAG = '1 minute'
AS (
    SELECT 
        TRANSACTION_ID,
        SEARCH_CONTENT,
        AUTHORIZED_USERS,
        AUTHORIZED_USER_COUNT,
        RISK_LEVEL,
        RISK_SCORE,
        SENSITIVITY_LEVEL,
        AMOUNT,
        CUSTOMER_ID,
        MERCHANT_NAME,
        MERCHANT_CATEGORY,
        REGION_CODE,
        TRANSACTION_DATE,
        TRANSACTION_STATUS
    FROM CORTEX_SEARCH_TRANSACTIONS  
    WHERE RISK_LEVEL IN ('HIGH', 'CRITICAL') 
       OR SENSITIVITY_LEVEL IN ('RESTRICTED', 'CONFIDENTIAL')
);

-- =============================================================================
-- STEP 4: WAIT FOR INDEX REFRESH AND VERIFY STATUS
-- =============================================================================

-- Check the status of search services
SHOW CORTEX SEARCH SERVICES;

-- Describe the main search service
DESCRIBE CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE;

-- Check refresh status (run after a few minutes)
/*
SELECT 
    SERVICE_NAME,
    STATUS,
    TARGET_LAG,
    LAST_REFRESH_START_TIME,
    LAST_REFRESH_END_TIME,
    LAST_REFRESH_STATUS
FROM TABLE(INFORMATION_SCHEMA.CORTEX_SEARCH_SERVICE_STATUS())
WHERE SERVICE_NAME IN ('TRANSACTION_SEARCH_SERVICE', 'HIGH_VALUE_TRANSACTION_SEARCH', 'FRAUD_RISK_TRANSACTION_SEARCH');
*/

-- =============================================================================
-- STEP 5: GRANT PERMISSIONS FOR SEARCH SERVICES
-- =============================================================================

-- Grant usage on search services to our demo roles
-- Note: In a production environment, you would grant these more selectively

GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE EXEC_GLOBAL_ACCESS;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE MANAGER_US_EAST;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE MANAGER_US_WEST;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE MANAGER_EUROPE;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE MANAGER_ASIA_PAC;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE DEPT_FINANCE;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE DEPT_FRAUD;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE DEPT_COMPLIANCE;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE DEPT_OPERATIONS;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE DEPT_CUSTOMER_SERVICE;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE SPECIALIST_PREMIUM;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE SPECIALIST_GOLD;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE ANALYST_LOW_RISK;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE ANALYST_HIGH_RISK;
GRANT USAGE ON CORTEX SEARCH SERVICE TRANSACTION_SEARCH_SERVICE TO ROLE PARTNER_LIMITED;

-- Grant access to specialized search services (more restrictive)
GRANT USAGE ON CORTEX SEARCH SERVICE HIGH_VALUE_TRANSACTION_SEARCH TO ROLE EXEC_GLOBAL_ACCESS;
GRANT USAGE ON CORTEX SEARCH SERVICE HIGH_VALUE_TRANSACTION_SEARCH TO ROLE DEPT_FINANCE;
GRANT USAGE ON CORTEX SEARCH SERVICE HIGH_VALUE_TRANSACTION_SEARCH TO ROLE DEPT_COMPLIANCE;
GRANT USAGE ON CORTEX SEARCH SERVICE HIGH_VALUE_TRANSACTION_SEARCH TO ROLE SPECIALIST_PREMIUM;

GRANT USAGE ON CORTEX SEARCH SERVICE FRAUD_RISK_TRANSACTION_SEARCH TO ROLE EXEC_GLOBAL_ACCESS;
GRANT USAGE ON CORTEX SEARCH SERVICE FRAUD_RISK_TRANSACTION_SEARCH TO ROLE DEPT_FRAUD;
GRANT USAGE ON CORTEX SEARCH SERVICE FRAUD_RISK_TRANSACTION_SEARCH TO ROLE DEPT_COMPLIANCE;
GRANT USAGE ON CORTEX SEARCH SERVICE FRAUD_RISK_TRANSACTION_SEARCH TO ROLE ANALYST_HIGH_RISK;

-- =============================================================================
-- STEP 6: CREATE HELPER FUNCTIONS FOR USER-FILTERED SEARCH
-- =============================================================================

-- Create a stored procedure for user-specific search
CREATE OR REPLACE PROCEDURE SEARCH_TRANSACTIONS_FOR_USER(
    SEARCH_QUERY STRING,
    USERNAME STRING,
    RESULT_LIMIT INTEGER DEFAULT 50
)
RETURNS TABLE (
    TRANSACTION_ID STRING,
    RELEVANCE_SCORE FLOAT,
    SEARCH_CONTENT STRING,
    AMOUNT FLOAT,
    MERCHANT_NAME STRING,
    TRANSACTION_DATE TIMESTAMP_NTZ,
    REGION_CODE STRING,
    CUSTOMER_TIER STRING,
    RISK_LEVEL STRING,
    AUTHORIZED_USERS ARRAY
)
LANGUAGE SQL
AS
$$
BEGIN
    -- Create a result set that filters by user entitlements
    LET result_query := 
        'SELECT 
            TRANSACTION_ID,
            RELEVANCE_SCORE,
            SEARCH_CONTENT,
            AMOUNT,
            MERCHANT_NAME,
            TRANSACTION_DATE,
            REGION_CODE,
            CUSTOMER_TIER,
            RISK_LEVEL,
            AUTHORIZED_USERS
        FROM TABLE(
            SNOWFLAKE.CORTEX.SEARCH_PREVIEW(
                TRANSACTION_SEARCH_SERVICE,
                ''' || SEARCH_QUERY || ''',
                ''' || RESULT_LIMIT || '''
            )
        )
        WHERE ARRAY_CONTAINS(''' || USERNAME || '''::VARIANT, AUTHORIZED_USERS)
        ORDER BY RELEVANCE_SCORE DESC';
        
    RETURN TABLE(RESULT_SCAN(result_query));
END;
$$;

-- Create a simpler function for basic entitlement-aware search
CREATE OR REPLACE FUNCTION SEARCH_WITH_ENTITLEMENTS(
    SEARCH_QUERY STRING,
    USERNAME STRING
)
RETURNS TABLE (
    TRANSACTION_ID STRING,
    RELEVANCE_SCORE FLOAT, 
    AMOUNT FLOAT,
    MERCHANT_NAME STRING,
    REGION_CODE STRING,
    RISK_LEVEL STRING
)
LANGUAGE SQL
AS
$$
    SELECT 
        TRANSACTION_ID,
        RELEVANCE_SCORE,
        AMOUNT,
        MERCHANT_NAME,
        REGION_CODE,
        RISK_LEVEL
    FROM TABLE(
        SNOWFLAKE.CORTEX.SEARCH_PREVIEW(
            TRANSACTION_SEARCH_SERVICE,
            SEARCH_QUERY,
            100
        )
    )
    WHERE ARRAY_CONTAINS(USERNAME::VARIANT, AUTHORIZED_USERS)
    ORDER BY RELEVANCE_SCORE DESC
    LIMIT 50
$$;

-- =============================================================================
-- STEP 7: CREATE ENTITLEMENT-AWARE SEARCH VIEWS
-- =============================================================================

-- Create a view that shows search capabilities per user
CREATE OR REPLACE VIEW USER_SEARCH_CAPABILITIES AS
SELECT 
    u.USERNAME,
    u.FULL_NAME,
    u.ACCESS_LEVEL,
    u.IS_EXECUTIVE,
    u.IS_MANAGER,
    u.IS_EXTERNAL,
    
    -- Search scope statistics
    COUNT(CASE WHEN tua.HAS_ACCESS THEN 1 END) AS SEARCHABLE_TRANSACTIONS,
    COUNT(DISTINCT t.REGION_CODE) AS SEARCHABLE_REGIONS,
    COUNT(DISTINCT t.CUSTOMER_TIER) AS SEARCHABLE_CUSTOMER_TIERS,
    COUNT(DISTINCT t.SENSITIVITY_LEVEL) AS SEARCHABLE_SENSITIVITY_LEVELS,
    COUNT(DISTINCT t.RISK_LEVEL) AS SEARCHABLE_RISK_LEVELS,
    
    -- Amount range accessible
    MIN(CASE WHEN tua.HAS_ACCESS THEN t.AMOUNT END) AS MIN_ACCESSIBLE_AMOUNT,
    MAX(CASE WHEN tua.HAS_ACCESS THEN t.AMOUNT END) AS MAX_ACCESSIBLE_AMOUNT,
    
    -- Search service access (based on role grants - would need to be updated based on actual grants)
    CASE 
        WHEN u.IS_EXECUTIVE OR u.ACCESS_LEVEL IN ('GLOBAL', 'DEPARTMENTAL') THEN TRUE
        ELSE FALSE
    END AS HAS_MAIN_SEARCH_ACCESS,
    
    CASE 
        WHEN u.IS_EXECUTIVE OR u.DEPARTMENT IN ('FINANCE', 'COMPLIANCE') OR u.ACCESS_LEVEL = 'SPECIALIZED' THEN TRUE
        ELSE FALSE  
    END AS HAS_HIGH_VALUE_SEARCH_ACCESS,
    
    CASE
        WHEN u.IS_EXECUTIVE OR u.DEPARTMENT IN ('FRAUD', 'COMPLIANCE') OR u.ACCESS_LEVEL = 'SPECIALIZED' THEN TRUE
        ELSE FALSE
    END AS HAS_FRAUD_RISK_SEARCH_ACCESS

FROM USER_ACCESS_MAPPING u
LEFT JOIN TRANSACTION_USER_ACCESS tua ON u.USERNAME = tua.USERNAME  
LEFT JOIN CREDIT_CARD_TRANSACTIONS t ON tua.TRANSACTION_ID = t.TRANSACTION_ID
GROUP BY 
    u.USERNAME, u.FULL_NAME, u.ACCESS_LEVEL, u.IS_EXECUTIVE, u.IS_MANAGER, u.IS_EXTERNAL, u.DEPARTMENT
ORDER BY SEARCHABLE_TRANSACTIONS DESC;

-- =============================================================================
-- VERIFICATION AND STATUS
-- =============================================================================

-- Show search service status
SELECT 
    'CORTEX SEARCH SERVICES CREATED' AS STATUS,
    COUNT(*) AS SERVICE_COUNT
FROM INFORMATION_SCHEMA.CORTEX_SEARCH_SERVICES
WHERE SEARCH_SERVICE_SCHEMA = 'ENTITLEMENTS';

-- Show user search capabilities summary  
SELECT 
    'User Search Capabilities Summary' AS SECTION,
    COUNT(*) AS TOTAL_USERS,
    AVG(SEARCHABLE_TRANSACTIONS) AS AVG_SEARCHABLE_TRANSACTIONS,
    MAX(SEARCHABLE_TRANSACTIONS) AS MAX_SEARCHABLE_TRANSACTIONS,
    MIN(SEARCHABLE_TRANSACTIONS) AS MIN_SEARCHABLE_TRANSACTIONS
FROM USER_SEARCH_CAPABILITIES;

-- Show sample search capabilities by access level
SELECT 
    ACCESS_LEVEL,
    COUNT(*) AS USER_COUNT,
    ROUND(AVG(SEARCHABLE_TRANSACTIONS), 0) AS AVG_SEARCHABLE,
    ROUND(AVG(MAX_ACCESSIBLE_AMOUNT), 2) AS AVG_MAX_AMOUNT
FROM USER_SEARCH_CAPABILITIES
GROUP BY ACCESS_LEVEL
ORDER BY AVG_SEARCHABLE DESC;

SELECT 'Cortex Search indexes created successfully!' AS STATUS;
